<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <help_text>// Uncomment the following line to change the fontsize and font:
// fontsize=14
// fontfamily=SansSerif //possible: SansSerif,Serif,Monospaced
fontfamily=Monospaced

//////////////////////////////////////////////////////////////////////////////////////////////
// Welcome to UMLet!
//
// Double-click on elements to add them to the diagram, or to copy them
// Edit elements by modifying the text in this panel
// Hold Ctrl to select multiple elements
// Use Ctrl+mouse to select via lasso
//
// Use +/- or Ctrl+mouse wheel to zoom
// Drag a whole relation at its central square icon
//
// Press Ctrl+C to copy the whole diagram to the system clipboard (then just paste it to, eg, Word)
// Edit the files in the "palettes" directory to create your own element palettes
//
// Select "Custom Elements &gt; New..." to create new element types
//////////////////////////////////////////////////////////////////////////////////////////////


// This text will be stored with each diagram;  use it for notes.</help_text>
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>10</x>
      <y>10</y>
      <w>360</w>
      <h>380</h>
    </coordinates>
    <panel_attributes>Class BehaviorNode
--
{innerclass
Struct State
--
{innerclass
Enum StateType
--
READY_SUCCESS
RUNNING
FAILED
ERROR
innerclass}
--
StateType stateType;
std::size_t lastRunning;
innerclass}
--
public:
  void insert(BehaviorNode&amp;&amp; node);
  void resetState();
  State activate();
protected:
  BehaviorNode* parent;
  BehaviorNode[] children;
  State state;

  virtual State performAction() = 0;
  virtual State continueAction() = 0;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>10</x>
      <y>440</y>
      <w>370</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>Class LogicNode
(Priority, Sequence, Random,
Loop, Concurrent)
--
protected:
  virtual State performAction() override;
  virtual State continueAction() override;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>180</x>
      <y>380</y>
      <w>30</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>390</x>
      <y>440</y>
      <w>460</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>Class ActionNode
--
public:
  ActionNode();
  ActionNode(StateType (*actionFunction)(bool));
  void setAction(StateType (*actionFunction)(bool));
protected:
  virtual State performAction() override;
  virtual State continueAction() override;
private:
  StateType (*actionFunction)(bool);</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>360</x>
      <y>380</y>
      <w>80</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;60.0;60.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>390</x>
      <y>10</y>
      <w>280</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>Note:
Variable "lastRunning" in State
must be refer to one of the
child nodes of the current node.
This lets the tree find and
continue Running nodes.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>410</x>
      <y>130</y>
      <w>400</w>
      <h>290</h>
    </coordinates>
    <panel_attributes>Priority Selector
  Iterate through child nodes, on sucess,
  or running, stop and return state.
Sequence Selector
  Iterate through child nodes, on running,
  stop. Return success if all child nodes
  return success.
Random Selector
  Pick one child node and run it, returning
  the resulting state.
Loop
  Loop through child nodes until running or
  fail.
Concurrent
  Iterate through child nodes, stop on running
  or fail. Return success if all child nodes
  return success.</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
